// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: chores.sql

package queries

import (
	"context"
	"time"
)

const createChore = `-- name: CreateChore :one
INSERT INTO chores (owner_id, name, last_completed, next_deadline, frequency_days) VALUES ($1, $2, 0, 0, $3)
    RETURNING id
`

type CreateChoreParams struct {
	OwnerID       int32
	Name          string
	FrequencyDays int32
}

func (q *Queries) CreateChore(ctx context.Context, arg CreateChoreParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, createChore, arg.OwnerID, arg.Name, arg.FrequencyDays)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const getChore = `-- name: GetChore :one
SELECT id, owner_id, name, last_completed, next_deadline, frequency_days FROM chores WHERE id=$1
`

func (q *Queries) GetChore(ctx context.Context, id int64) (Chore, error) {
	row := q.db.QueryRowContext(ctx, getChore, id)
	var i Chore
	err := row.Scan(
		&i.ID,
		&i.OwnerID,
		&i.Name,
		&i.LastCompleted,
		&i.NextDeadline,
		&i.FrequencyDays,
	)
	return i, err
}

const listChores = `-- name: ListChores :many
SELECT id, owner_id, name, last_completed, next_deadline, frequency_days FROM chores WHERE owner_id=$1
`

func (q *Queries) ListChores(ctx context.Context, ownerID int32) ([]Chore, error) {
	rows, err := q.db.QueryContext(ctx, listChores, ownerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Chore
	for rows.Next() {
		var i Chore
		if err := rows.Scan(
			&i.ID,
			&i.OwnerID,
			&i.Name,
			&i.LastCompleted,
			&i.NextDeadline,
			&i.FrequencyDays,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateChoreCompleted = `-- name: UpdateChoreCompleted :exec
UPDATE chores SET last_completed=$2, next_deadline=$3 WHERE id=$1
`

type UpdateChoreCompletedParams struct {
	ID            int64
	LastCompleted time.Time
	NextDeadline  time.Time
}

func (q *Queries) UpdateChoreCompleted(ctx context.Context, arg UpdateChoreCompletedParams) error {
	_, err := q.db.ExecContext(ctx, updateChoreCompleted, arg.ID, arg.LastCompleted, arg.NextDeadline)
	return err
}
