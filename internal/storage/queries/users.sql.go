// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: users.sql

package queries

import (
	"context"
)

const createUserFromEmail = `-- name: CreateUserFromEmail :one
INSERT INTO users (authprovider, authprovider_id)
VALUES ('email', $1)
RETURNING id
`

func (q *Queries) CreateUserFromEmail(ctx context.Context, authproviderID string) (int64, error) {
	row := q.db.QueryRowContext(ctx, createUserFromEmail, authproviderID)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const createUserFromGoogle = `-- name: CreateUserFromGoogle :one
INSERT INTO users (authprovider, authprovider_id)
VALUES ('google', $1)
RETURNING id
`

func (q *Queries) CreateUserFromGoogle(ctx context.Context, authproviderID string) (int64, error) {
	row := q.db.QueryRowContext(ctx, createUserFromGoogle, authproviderID)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const grantPermission = `-- name: GrantPermission :exec
INSERT INTO users_permissions (user_id, role)
VALUES ($1, $2)
`

type GrantPermissionParams struct {
	UserID int32
	Role   string
}

func (q *Queries) GrantPermission(ctx context.Context, arg GrantPermissionParams) error {
	_, err := q.db.ExecContext(ctx, grantPermission, arg.UserID, arg.Role)
	return err
}

const revokePermission = `-- name: RevokePermission :exec
DELETE FROM users_permissions WHERE user_id = $1 AND role = $2
`

type RevokePermissionParams struct {
	UserID int32
	Role   string
}

func (q *Queries) RevokePermission(ctx context.Context, arg RevokePermissionParams) error {
	_, err := q.db.ExecContext(ctx, revokePermission, arg.UserID, arg.Role)
	return err
}
